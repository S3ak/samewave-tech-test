$breakpoints: (
  'small'  : ( min-width: $screen-sm-min ),
  'medium' : ( min-width: $screen-md-min ),
  'large'  : ( min-width: $screen-lg-min )
);

@mixin respond-to($name) {
  // If the key exists in the map
  @if map-has-key($breakpoints, $name) {
    // Prints a media query based on the value
    @media #{inspect(map-get($breakpoints, $name))} {
      @content;
    }
  }

  // If the key doesn't exist in the map
  @else {
    @warn "Unfortunately, no value could be retrieved from `#{$breakpoint}`. "
        + "Please make sure it is defined in `$breakpoints` map.";
  }
}

// @include respond-to(small) { ... }
// @include respond-to(medium) { ... }
// @include respond-to(large) { ... }

/// Z-indexes map, gathering all Z layers of the application
/// @access private
/// @type Map
/// @prop {String} key - Layer's name
/// @prop {Number} value - Z value mapped to the key
$z-indexes: (
  'navbar':            1000,
  'dropdown':          1000,
  'popover':           1060,
  'tooltip':           1070,
  'navbar-fixed':      1030,
  'modal-background':  1040,
  'modal':             1050,
  'ceiling': 1060,
  'above': 1070,
  'default': 1,
  'below': -1,
  'bottomless-pit': -9999
);

/// Get a z-index value from a layer name
/// @access public
/// @param {String} $layer - Layer's name
/// @return {Number}
/// @require $z-indexes
@function z($layer) {
  @if not map-has-key($z-indexes, $layer) {
    @error 'There is no layer named `#{$layer}` in $z-indexes. '
         + 'Layer should be one of #{map-keys($z-indexes)}.';
  }

  @return map-get($z-indexes, $layer);
}
